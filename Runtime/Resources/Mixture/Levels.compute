// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Levels
#pragma kernel FindMinMax
#pragma kernel Preview

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

#pragma enable_d3d11_debug_symbols

sampler s_point_clamp_sampler;

Texture2D<float4> _Input;
RWTexture2D<float4> _Output;

RWByteAddressBuffer _MinMax;
RWByteAddressBuffer _Histogram;
uint _HistogramBucketCount;

// TODO: we don't need that
[numthreads(8,8,1)]
void FindMinMax(uint3 id : SV_DispatchThreadID)
{
    float4 input = _Input[id.xy];

    // Insert your code here
    // TODO: shared memory with min max redux
    float value = Luminance(input);
    _MinMax.InterlockedMin(0, asfloat(value)); // Min luminance
    _MinMax.InterlockedMax(4, asfloat(value)); // Max luminance
}

[numthreads(64,0,1)]
void ClearHistogramData(uint3 id : SV_DispatchThreadID)
{
    _Histogram.Store(id.x, 0);
}

[numthreads(8,8,1)]
void Levels(uint3 id : SV_DispatchThreadID)
{
    float4 input = _Input.SampleLevel(s_point_clamp_sampler, id.xy / 1024.0, 0);

    // Insert your code here

    // TODO: histogram modes
    float value = Luminance(input);
    uint result;
    _Histogram.InterlockedAdd(uint(saturate(value) * _HistogramBucketCount), 1, result);
    _MinMax.InterlockedMin(0, asfloat(value)); // Min luminance
    _MinMax.InterlockedMax(4, asfloat(value)); // Max luminance
    _MinMax.InterlockedMin(8, result + 1); // Min count in histogram bucket
    _MinMax.InterlockedMax(12, result + 1); // Max count in histogram bucket

    _Output[id.xy] = input;
}

// This will be used for the preview Texture in the node
RWTexture2D<float4> _Preview;
float4 _PreviewResolution; // xy is the pixel resolution and zw is 1 / xy

[numthreads(8, 8, 1)]
void Preview(uint3 id : SV_DispatchThreadID)
{
    // You can insert custom preview code here
    _Preview[id.xy] = _Output[id.xy];
}