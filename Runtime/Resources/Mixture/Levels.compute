// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Levels
#pragma kernel FindMinMax
#pragma kernel Preview

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

#pragma enable_d3d11_debug_symbols

Texture2D<float4> _Input;
RWTexture2D<float4> _Output;

RWByteAddressBuffer _MinMax;
RWByteAddressBuffer _Histogram;
uint _HistogramBucketCount;

[numthreads(8,8,1)]
void FindMinMax(uint3 id : SV_DispatchThreadID)
{
    float4 input = _Input[id.xy];

    // Insert your code here
    // TODO: shared memory with min max redux
    float value = Luminance(input);
    _MinMax.InterlockedMin(0, uint(value * 1000000)); //  TODO: hardcoded value, asfloat ?
    _MinMax.InterlockedMax(1, uint(value * 1000000));

    _Output[id.xy] = input;
}

[numthreads(64,0,1)]
void ClearHistogramData(uint3 id : SV_DispatchThreadID)
{
    _Histogram.Store(id.x, 0);
}

[numthreads(8,8,1)]
void Levels (uint3 id : SV_DispatchThreadID)
{
    float4 input = _Input[id.xy];

    // Insert your code here

    // TODO: histogram modes
    float value = Luminance(input);
    _Histogram.InterlockedAdd(uint(saturate(value) * _HistogramBucketCount), 1);

    _Output[id.xy] = input;
}

// This will be used for the preview Texture in the node
RWTexture2D<float4> _Preview;
float4 _PreviewResolution; // xy is the pixel resolution and zw is 1 / xy

[numthreads(8, 8, 1)]
void Preview(uint3 id : SV_DispatchThreadID)
{
    // You can insert custom preview code here
    _Preview[id.xy] = _Output[id.xy];
}