// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Levels
#pragma kernel Preview

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.alelievr.mixture/Runtime/Shaders/MixtureFixed.cginc"
#include "Packages/com.alelievr.mixture/Editor/Resources/HistogramData.hlsl"

#pragma enable_d3d11_debug_symbols
#pragma multi_compile_local CRT_2D CRT_3D CRT_CUBE

Texture2D<float4> _Input;
RWTexture2D<float4> _Output;
Texture2D<float> _InterpolationCurve;
float3 _RcpTextureSize;

float _Mode;
float _Min, _Max;
RWStructuredBuffer<LuminanceData> _Luminance;

[numthreads(8,8,1)]
void Levels(uint3 id : SV_DispatchThreadID)
{
    // TODO: function to turn the id into direction / uv for cube / 3D
    float3 uv = GetDefaultUVsComputeShader(id.xyz, _RcpTextureSize);
    float4 input = _Input.SampleLevel(s_point_clamp_sampler, uv.xy, 0);

    float minLum = _Luminance[0].minLuminance;
    float maxLum = _Luminance[0].maxLuminance;

    input.rgb -= minLum;
    input.rgb /= (maxLum - minLum);

    // remap luminance between 0 and 1 to sample the curve:
    float clampedLuminance = Luminance(clamp(input.rgb, minLum, maxLum));
    float luminance01 = clampedLuminance - minLum * rcp(maxLum - minLum);

    // Remap luminance with curve
    luminance01 = _InterpolationCurve.SampleLevel(s_linear_clamp_sampler, luminance01, 0).r;

    // Remap luminance between min and max
    float correctedLuminance = luminance01 * (maxLum - minLum) + minLum;
    // Correct the color with the new luminance
    float luminanceOffset = correctedLuminance - clampedLuminance;
    // float3 D65 = float3(0.2126729, 0.7151522, 0.0721750);

    // TODO: interp curve doesn't work, it needs correct luminance limits of the texture instead of parametric one
    // input.rgb *= 1 + luminaceOffset;

    _Output[id.xy] = input;
}

// This will be used for the preview Texture in the node
RWTexture2D<float4> _Preview;
float4 _PreviewResolution; // xy is the pixel resolution and zw is 1 / xy

[numthreads(8, 8, 1)]
void Preview(uint3 id : SV_DispatchThreadID)
{
    // You can insert custom preview code here
    _Preview[id.xy] = _Output[id.xy];
}