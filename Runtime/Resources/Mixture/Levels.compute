// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Levels
#pragma kernel FindMinMax
#pragma kernel Preview

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.alelievr.mixture/Runtime/Shaders/MixtureFixed.cginc"

#pragma enable_d3d11_debug_symbols

Texture2D<float4> _Input;
RWTexture2D<float4> _Output;
Texture2D<float> _InterpolationCurve;

float _InterpolationCurveResolution;
float _Min;
float _Max;

// TODO: we don't need that
[numthreads(8,8,1)]
void FindMinMax(uint3 id : SV_DispatchThreadID)
{
    float4 input = _Input[id.xy];

    // Insert your code here
    // TODO: shared memory with min max redux
    float value = Luminance(input);
}

[numthreads(8,8,1)]
void Levels(uint3 id : SV_DispatchThreadID)
{
    float4 input = _Input.SampleLevel(s_point_clamp_sampler, id.xy / 1024.0, 0);

    input.rgb -= _Min;
    input.rgb /= (_Max - _Min);

    // remap luminance between 0 and 1 to sample the curve:
    float clampedLuminance = Luminance(clamp(input.rgb, _Min, _Max));
    float luminance01 = clampedLuminance - _Min * rcp(_Max - _Min);

    // Remap luminance with curve
    luminance01 = _InterpolationCurve.SampleLevel(s_linear_clamp_sampler, luminance01, 0).r;

    // Remap luminance between min and max
    float correctedLuminance = luminance01 * (_Max - _Min) + _Min;
    // Correct the color with the new luminance
    float luminanceOffset = correctedLuminance - clampedLuminance;
    // float3 D65 = float3(0.2126729, 0.7151522, 0.0721750);

    input.rgb *= 1 + luminanceOffset;

    _Output[id.xy] = input;
}

// This will be used for the preview Texture in the node
RWTexture2D<float4> _Preview;
float4 _PreviewResolution; // xy is the pixel resolution and zw is 1 / xy

[numthreads(8, 8, 1)]
void Preview(uint3 id : SV_DispatchThreadID)
{
    // You can insert custom preview code here
    _Preview[id.xy] = _Output[id.xy];
}